/*  Future<void> pickVideoFromGallery() async {
    String uniqueImageId = const Uuid().v4();
    try {
      final pickedFile = await ImagePicker().pickVideo(source: ImageSource.gallery);
      if (pickedFile != null) {
        String file = pickedFile.path;

        final chunkSize = 1024 * 1024;

        File videoFile = File(file);
        int originalFileSize = await videoFile.length();
        print('Original video size: $originalFileSize bytes');

        int fileSize = await videoFile.length();
        int numChunks = (fileSize / chunkSize).ceil();

        Directory tempDir = await getTemporaryDirectory();

        List<String> chunkPaths = [];

        for (int i = 0; i < numChunks; i++) {
          int start = i * chunkSize;
          int end = (i + 1) * chunkSize;
          if (end > fileSize) end = fileSize;

          RandomAccessFile raf = videoFile.openSync(mode: FileMode.read);


          raf.setPositionSync(start);

          // Read the chunk into a List<int>
          List<int> chunkData = raf.readSync(end - start);

          // Close the file
          raf.closeSync();

          String chunkPath = '${tempDir.path}/chunk_$i.tmp';

          await File(chunkPath).writeAsBytes(chunkData);

          chunkPaths.add(chunkPath);
        }

        for (int i = 0; i < numChunks; i++) {
          String chunkPath = chunkPaths[i];
          final info = await VideoCompress.compressVideo(
            chunkPath,
            quality: VideoQuality.MediumQuality,
            deleteOrigin: false,
            includeAudio: true,
          );

          if (info != null && info.path != null) {
            Reference referenceDirVideo = FirebaseStorage.instance.ref().child('videos');
            Reference referenceVideoToUpload = referenceDirVideo.child(uniqueImageId);
            await referenceVideoToUpload.putFile(File(info.path!));
            File compressedFile = File(info.path!);
            videoUrl = await referenceVideoToUpload.getDownloadURL();
            int compressedFileSize = await compressedFile.length();
            print('Compressed video size after chunk $i: $compressedFileSize bytes');
            print('Original video size: $originalFileSize bytes');
            print('Uploaded chunk $i');

            await compressedFile.delete();
          }
        }

        Utils().toastMessage("Video uploaded successfully");
      }
    } catch (e) {
      print('error $e');
      Utils().toastMessage(e.toString());
    }
  }*/








  /*  void backgroundVideoUpload(String videoPath, String uniqueVideoId) async {
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      print('hello from the background services : ');
      Reference referenceroot = FirebaseStorage.instance.ref();
      Reference referenceDirVideo = referenceroot.child('videos');
      Reference referenceVideoToUpload = referenceDirVideo.child(uniqueVideoId);
      print("this is a uniqueVideoId $uniqueVideoId ");
      print("this is a uniqueVideoId $referenceVideoToUpload ");
      print(
          "from background video upload method file path is  ${File(videoPath)}");
      UploadTask uploadTask = referenceVideoToUpload.putFile(File(videoPath));
      await uploadTask.whenComplete(() async {
        videoUrl = await referenceVideoToUpload.getDownloadURL();
        print('uploaded video url is : $videoUrl');
      });

      *//*   uploadTask.snapshotEvents.listen((TaskSnapshot snapshot) {
        double progress = snapshot.bytesTransferred / snapshot.totalBytes;
        print('Upload progress: $progress');
        uploadProgress.value = progress;
      });*//*
      try {


        *//*   await uploadTask;
        videoUrl = await referenceVideoToUpload.getDownloadURL();
        await Future.delayed(Duration(seconds: 1));
        print('uploaded video url is : $videoUrl');*//*
        Utils().toastMessage("Video uploaded successfully");
      } catch (e) {
        await Future.delayed(Duration(seconds: 1));
        Utils().toastMessage(e.toString());
      }
    }

    Future<void> pickVideoFromGallery() async {
      var file;
      String uniqueVideoId = const Uuid().v4();
      try {
        final pickedFile =
            await ImagePicker().pickVideo(source: ImageSource.gallery);
        imageUrl = '';
        if (pickedFile != null) {
          int originalFileSize = File(pickedFile.path).lengthSync();
          galleryVideos.add(pickedFile.path);
          file = pickedFile!.path;
          final info = await VideoCompress.compressVideo(
            file,
            quality: VideoQuality.MediumQuality,
            deleteOrigin: false,
            includeAudio: true,
          );
          print(info!.path);
          int compressedFileSize = File(info.path ?? '').lengthSync();
          print('Original file size: $originalFileSize bytes');
          print('Compressed file size: $compressedFileSize bytes');
          final compressedVideoPath = info.path;

          await Workmanager().registerOneOffTask(
            "uploadTask",
            "uploadVideo",
            constraints: Constraints(networkType: NetworkType.connected),
            inputData: <String, dynamic>{
              'videoPath': compressedVideoPath,
              'uniqueVideoId': uniqueVideoId,
            },
          );
        }
      } catch (e) {
        print('error $e');
        Utils().toastMessage(e.toString());
      }
    }*/